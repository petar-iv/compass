// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
)

// DestinationRepo is an autogenerated mock type for the DestinationRepo type
type DestinationRepo struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, revision
func (_m *DestinationRepo) Delete(ctx context.Context, revision string) error {
	ret := _m.Called(ctx, revision)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, revision)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Upsert provides a mock function with given fields: ctx, in, id, tenantID, bundleID, revision
func (_m *DestinationRepo) Upsert(ctx context.Context, in model.DestinationInput, id string, tenantID string, bundleID string, revision string) error {
	ret := _m.Called(ctx, in, id, tenantID, bundleID, revision)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.DestinationInput, string, string, string, string) error); ok {
		r0 = rf(ctx, in, id, tenantID, bundleID, revision)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDestinationRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewDestinationRepo creates a new instance of DestinationRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDestinationRepo(t mockConstructorTestingTNewDestinationRepo) *DestinationRepo {
	mock := &DestinationRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
